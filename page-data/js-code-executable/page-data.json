{"componentChunkName":"component---src-templates-blog-post-js","path":"/js-code-executable/","result":{"data":{"site":{"siteMetadata":{"title":"eternitrance"}},"markdownRemark":{"id":"1076ef00-7564-5d53-8df3-067687eb6880","excerpt":"这次啃一个 GitHub repo 上的几篇文章，虽然 Blogger 讲得算很易懂了，但还是要花时间好好吸收一下。 作用域 JavaScript…","html":"<p>这次啃一个 GitHub repo 上的几篇文章，虽然 Blogger 讲得算很易懂了，但还是要花时间好好吸收一下。</p>\n<h2>作用域</h2>\n<p>JavaScript 采用词法作用域（静态作用域），函数的作用域在函数定义时就已经确定。与之相反的动态作用域，函数的作用域是在函数调用时才决定。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-1</span>\n<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 定义: 函数内无局部变量 value，获取全局变量 value = 1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 调用 foo(): 不再获取 bar() 内的局部变量 value</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1</span></code></pre></div>\n<p>如果是动态作用域，则是：执行 <code class=\"language-text\">foo()</code>，依然先从 <code class=\"language-text\">foo()</code> 内部查找是否有局部变量 <code class=\"language-text\">value</code>。如果没有，就从调用函数的作用域，也就是 <code class=\"language-text\">bar()</code> 内部查找 <code class=\"language-text\">value</code>，结果为 2。</p>\n<p>接下来是两段代码，虽然执行结果相同，但在执行上却有何差异？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-2 Code</span>\n<span class=\"token keyword\">var</span> scope <span class=\"token operator\">=</span> <span class=\"token string\">\"global scope\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkscope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> scope <span class=\"token operator\">=</span> <span class=\"token string\">\"local scope\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> scope<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">checkscope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"local scope\"</span>\n\n<span class=\"token comment\">//example-3 Code</span>\n<span class=\"token keyword\">var</span> scope <span class=\"token operator\">=</span> <span class=\"token string\">\"global scope\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkscope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> scope <span class=\"token operator\">=</span> <span class=\"token string\">\"local scope\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> scope<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">checkscope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"local scope\"</span></code></pre></div>\n<p>找到了 SegmentFault 上的一个<a href=\"https://segmentfault.com/q/1010000005857486/\">提问</a>，解释的较为详细了。</p>\n<p>从代码的行文来看，会发现：</p>\n<p><code class=\"language-text\">example-2</code>：<code class=\"language-text\">checkscope()</code> 返回的是内部函数 <code class=\"language-text\">f()</code> 的执行结果；\n<code class=\"language-text\">example-3</code>：<code class=\"language-text\">checkscope()</code> 返回的是内部函数 <code class=\"language-text\">f</code>，然后再执行返回的函数。</p>\n<h2>順序執行？</h2>\n<p>JavaScript 引擎并非以行来分析和执行代码，而是以段来分析执行。当执行一段代码的时候，会进行一个「准备工作」，比如下例的变量提升和函数提升：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-4 Code</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// foo1</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo2</span>\n\n<span class=\"token comment\">// example-5 Code</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// foo2</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo2</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-4 Real 变量提升</span>\n<span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//foo1</span>\n\n<span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//foo2</span>\n\n<span class=\"token comment\">//example-5 Real 函数提升</span>\n<span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo2</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo2</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"global var\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    a <span class=\"token operator\">=</span> <span class=\"token string\">\"function var\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function arg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// function var</span>\n<span class=\"token comment\">// function var > function arg > global var</span></code></pre></div>\n<h2>执行上下文栈</h2>\n<p>JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文，可以定义它为一个数组：<code class=\"language-text\">ECStack = [ ];</code></p>\n<p>当 JS 需要解释执行代码的时候，最先遇到全局代码，所以在初始化时先向栈内压入一个全局执行上下文，表示为 <code class=\"language-text\">globalContext</code>。只有当整个应用程序结束时，<code class=\"language-text\">ECStack</code> 才会被清空。所以程序结束之前，<code class=\"language-text\">ECStack</code> 底部永远有 <code class=\"language-text\">globalContext</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-6 Code</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fun3'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fun3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>当上例的代码执行时，执行上下文栈的处理为：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-6  Execute</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>fun1<span class=\"token operator\">></span> functionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fun1()</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>fun2<span class=\"token operator\">></span> functionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fun1() 调用fun2()，创建 fun2() 的执行上下文</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>fun3<span class=\"token operator\">></span> functionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fun2() 调用fun3()，创建 fun3() 的执行上下文</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fun3() 执行完毕</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fun2() 执行完毕</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// fun1() 执行完毕</span>\n<span class=\"token comment\">// JavaScript 接着执行下面的代码，但是 ECStack 底层永远有个 globalContext</span></code></pre></div>\n<p>最后我们回到 <code class=\"language-text\">example-2</code> 和 <code class=\"language-text\">example-3</code> 中，模拟执行上下文栈。此时能看出两段代码的区别：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-2 Execute</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>checkscope<span class=\"token operator\">></span> functionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>f<span class=\"token operator\">></span> functionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>f<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>chechscope<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// example-3 Execute</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>checkscope<span class=\"token operator\">></span> functionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>checkscope<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>f<span class=\"token operator\">></span> functionContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nECStack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>f<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于每个执行上下文，都有三个重要属性：</p>\n<ul>\n<li>变量对象 (Variable object，VO)</li>\n<li>作用域链 (Scope chain)</li>\n<li><code class=\"language-text\">this</code></li>\n</ul>\n<p>下面具体讨论上面提出的三个属性。</p>\n<h3>变量对象</h3>\n<p>变量对象存储上下文中定义的变量和函数声明。下面分情况讨论<strong>全局上下文</strong>的变量对象，和<strong>函数上下文</strong>的变量对象。</p>\n<h4>全局上下文</h4>\n<p>全局上下文中的变量对象，就是全局对象。是由 Object 构造函数实例化出的对象。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>全局对象预定义了一些函数和属性，还可以作为全局变量的宿主。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>函数上下文</h4>\n<p>在函数上下文中，通常使用活动对象(activation object, AO)表示变量对象。</p>\n<p>活动对象无法直接通过 JS 进行引用，只有当 AO 进入执行上下文中才会被创建，通过函数的 <code class=\"language-text\">arguments</code> 属性初始化。</p>\n<h4>执行过程</h4>\n<p>接下来以下面的代码为例，解释执行上下文的过程。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-7 Code</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">d</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  b <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>\n<p>进入执行上下文，会依次导入：</p>\n<ul>\n<li>导入函数的所有形参</li>\n<li>函数声明</li>\n<li>变量声明</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-7 Step-1</span>\n<span class=\"token constant\">VO</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    arguments<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        length<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>                              <span class=\"token comment\">// 形参</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>                           <span class=\"token comment\">// 形参，值为实参或 undefined</span>\n    b<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 变量声明</span>\n    c<span class=\"token operator\">:</span> reference to <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 函数声明 地址引用</span>\n    d<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span>                    <span class=\"token comment\">// 变量声明</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>代码执行，给变量声明赋值</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-7 Step-2</span>\n<span class=\"token constant\">AO</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    arguments<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token number\">0</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        length<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>                                  <span class=\"token comment\">// 变量声明 赋值</span>\n    c<span class=\"token operator\">:</span> reference to <span class=\"token keyword\">function</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    d<span class=\"token operator\">:</span> reference to FunctionExpression <span class=\"token string\">\"d\"</span> <span class=\"token comment\">// 变量声明 引用</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://github.com/mqyqingfeng/Blog/issues/5#issuecomment-305073897\">思考：下面的代码将输出何内容？</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// example-8 Code</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// foo() {</span>\n<span class=\"token comment\">//   console.log(\"foo\");</span>\n<span class=\"token comment\">// }</span></code></pre></div>\n<p>思路：函数提升 > 变量提升</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//example-8 Hint</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 函数提升</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 变量提升</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo</span>\nfoo <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>作用域链</h3>\n<p>大概过程如下：</p>\n<ol>\n<li>创建 <code class=\"language-text\">ECStack = []</code></li>\n<li>首先压入 <code class=\"language-text\">globalContext</code></li>\n<li>初始化 <code class=\"language-text\">globalContext</code> 的执行上下文(VO)，获取变量对象</li>\n<li><code class=\"language-text\">globalContext</code> 代码执行(AO)</li>\n<li>函数<code class=\"language-text\">checkscope()</code> 被创建,初始化内部属性 <code class=\"language-text\">[[scope]]</code>，值为 <code class=\"language-text\">globalContext.AO</code></li>\n<li>函数提升，执行 <code class=\"language-text\">checkscope()</code> 代码，<code class=\"language-text\">checkscopeContext</code> 压入<code class=\"language-text\">ECStack</code></li>\n<li>初始化 <code class=\"language-text\">checkscope()</code> 的执行上下文，复制 <code class=\"language-text\">checkscope.[[scope]]</code> 到 <code class=\"language-text\">scopeChain</code> 中</li>\n<li>进入执行上下文 VO</li>\n<li>代码执行 AO</li>\n<li>…</li>\n</ol>\n<p>更详细的就不写了：<a href=\"https://github.com/wolfdu/blog-gitment/issues/13\">关于 <code class=\"language-text\">example-2</code> 和 <code class=\"language-text\">example-3</code> 的具体分析</a></p>\n<h3><code class=\"language-text\">this</code></h3>\n<blockquote>\n<p>该部分待编辑</p>\n</blockquote>","frontmatter":{"title":"JavaScript 之代码执行","date":"August 13, 2018","description":"通过系列文章，尝试理解 JS 代码的执行流程。"}}},"pageContext":{"slug":"/js-code-executable/","previous":{"fields":{"slug":"/js-prototype-and-a-quest/"},"frontmatter":{"title":"JavaScript 原型链和一道面试题"}},"next":{"fields":{"slug":"/a-experience-and-a-frontend-test/"},"frontmatter":{"title":"一次经历 一次笔试"}}}},"staticQueryHashes":["1353881592","2841359383"]}