{"componentChunkName":"component---src-templates-blog-post-js","path":"/hello-world-again/","result":{"data":{"site":{"siteMetadata":{"title":"eternitrance"}},"markdownRemark":{"id":"0b2c1eed-80ed-519e-9b41-4fdcd00ebf8b","excerpt":"为什么要换博客系统 其实 Hexo 一直以来都挺好用的。对于不喜欢笨重的 WordPress 来说，它能够非常轻量地准备一个环境。除了折腾主题和文章外，你只需要编译成静态页面，再选择一个 Page 服务或者 deploy platform…","html":"<h2>为什么要换博客系统</h2>\n<p>其实 <a href=\"https://hexo.io/\">Hexo</a> 一直以来都挺好用的。对于不喜欢笨重的 WordPress 来说，它能够非常轻量地准备一个环境。除了折腾主题和文章外，你只需要编译成静态页面，再选择一个 Page 服务或者 deploy platform 部署即可，不需要像以前一样准备服务器环境。在编译速度和编译可靠性上，它也算的上数一数二了，总的来说没有太大的短板。</p>\n<p>但这对于一个前端er来说，并不算是一个终极选择。由于自己本身使用的技术栈不在于此，也不想深入地理解源码，所以也无法过度地改造和发挥。假如要创建新的页面做其他展示，除了简单的创建 Markdown 文件来生成外，也没有兴趣了解其他的方式。</p>\n<p>也可能是自己框架用多了，所以更倾向于使用例如 VuePress、Gridsome、Gatsby 等等诸如此类的博客系统。它们能让开发者使用的 API，不仅仅是框架原有可以发挥的，还可以是基于博客属性再封装的。两种维度的开发方法，我也省了心去理解这个博客系统内核的源码，就像是夏天脱了件厚外套一样舒服。</p>\n<p>不过这种方式编译后的结果，比起之前 Hexo，从直接查看源代码来看复杂不少，且可能会出现框架或路由本身所导致的 Bug。不过这些都不重要，折腾就完事了。</p>\n<h2>最近要更什么</h2>\n<p>想了想自己在工作中，基于业务所开发的功能没啥好说的，顶多复盘一下自己踩过的坑。但是毕竟自己下班后还是会学习（和 ✋️🐟️）的，就可以围绕着 X 后感这件事来说些啥。所以准备了两个选题，之后会更（吧？ / 的。）</p>\n<ul>\n<li><del>浅谈信用卡中的生活</del></li>\n<li>项目中抽取公用模块，真的就易于维护了？</li>\n</ul>","frontmatter":{"title":"Hello world, again!","date":"September 06, 2020","description":"So, Hexo -> Gatsby! But, what's next?"}}},"pageContext":{"slug":"/hello-world-again/","previous":{"fields":{"slug":"/escape-netease-music/"},"frontmatter":{"title":"逃离云音乐"}},"next":{"fields":{"slug":"/what-have-i-been-learning/"},"frontmatter":{"title":"最近在学啥？"}}}},"staticQueryHashes":["1353881592","2841359383"]}