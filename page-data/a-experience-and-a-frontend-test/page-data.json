{"componentChunkName":"component---src-templates-blog-post-js","path":"/a-experience-and-a-frontend-test/","result":{"data":{"site":{"siteMetadata":{"title":"eternitrance"}},"markdownRemark":{"id":"f215bd36-1857-58cc-986d-3df282a0bdac","excerpt":"…","html":"<h2>最近忙什么</h2>\n<p>八月末，接到学院老师的电话，说有一份实习可以让我试试。大致订下了时间，第二天先和同学吃饭吹水，第三天一大早就坐上动车，前往假·省城。</p>\n<p>个中过程不叙。总之，是打算先帮助团队完成他们负责的工作，周末前往真·省城。部署了机房的机器，之后就给老师当当助教。</p>\n<p>同是一个专业的，感觉班级间的交流氛围，和他们的兴趣三观，都比较契合吧，聊得也很开心。只可惜不能呆久一点就是了。</p>\n<p>一周也就过去了。目前在宿舍里，望着教务网中没多少的课表，想着之后要怎么办。😔️</p>\n<h2>一次凉凉的阿里笔试</h2>\n<p>周三下午和周四没有任务，在酒店里收到了之前沧海乱投的“一粟”。（其实也有其他面试，但都错过了，心累）</p>\n<p>下面 po 一下题目。（先列出知识点，然后继续努力）</p>\n<h3>下列哪一项不是 Hybrid 应用架构的优势：</h3>\n<p>能够带来更好的 Web 页面渲染性能\n能够利用操作系统的原生能力\n能够突破浏览器的缓存限制，扩展更强的缓存功能\n开发成本较低，可以跨平台\n可以比较自由的更新代码\n针对开发新手，非常地友好，易于上手</p>\n<blockquote>\n<p>知识点：Hybrid，缓存</p>\n</blockquote>\n<h3>关于 Cookie 以下说法错误的是：</h3>\n<p>如果仅是为了缓存数据，采用 localStorage 比 Cookie 更好\n二级域名的页面请求时，同时会携带主域名的 Cookie\n对 Cookie 进行加密，可以降低 cookie 被截获后窃取服务端数据的风险\n客户端可以设置 Cookie\n服务端可以设置 Cookie\nCookie 的值是有大小限制的</p>\n<blockquote>\n<p>知识点：Cookie，Web Storage</p>\n</blockquote>\n<h3>关于 HTTP 请求的 Status Code，正确的是：</h3>\n<p>判断请求成功仅需判断 status === 200\n未登录错误为 302\n403 一般是由于用户登录但权限不够造成的\n307 可以完全用 301 代替实现\n404 错误不会被缓存\n相比 301，302 对搜索引擎更友好</p>\n<blockquote>\n<p>知识点：HTTP status codes</p>\n<p>参考链接：<a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">Wikipedia – List of HTTP status codes</a></p>\n</blockquote>\n<h3>下面关于 React 和 Vue 的说法正确的是：</h3>\n<p>Vue 的性能非常好，不可能将原生 JavaScript 代码优化到 Vue 的性能\nVue 体积比 React 小，所以运行性能全面好于 React\nReact16 引入新的生命周期可以捕获 Component 的错误\nVue 的服务端渲染非常快，比字符串模版渲染还要快\nReact 没有办法从子组件向父组件传递值\nVue1 和 Vue2 都不支持服务器渲染</p>\n<blockquote>\n<p>知识点：React，Vue，渲染机制，组件化，生命周期</p>\n</blockquote>\n<h3>盒模型不包含以下哪一个属性？</h3>\n<p>Padding\nContent\nBorder\nMargin\nWidth\nHeight\nPosition</p>\n<blockquote>\n<p>知识点：CSS，盒模型</p>\n<p>参考链接：<a href=\"https://en.wikipedia.org/wiki/CSS_box_model\">Wikipedia – CSS box model</a></p>\n</blockquote>\n<h3>以下关于 JavaScript 的堆栈的描述正确的是：</h3>\n<p>JavaScript 的 String、Array 类型的数据都是放在栈内存里的\nJavaScript 的引用类型是放在堆内存里的\n栈的读取顺序是先进先出的\n堆的读取顺序是先进后出的\n栈内存会由系统自动分配释放\n堆内存是大小固定的</p>\n<blockquote>\n<p>知识点：数据结构，堆，栈</p>\n</blockquote>\n<h3>关于跨域，以下说法正确的是：</h3>\n<p>jsonp 可以跨域\nfetch 可以跨域\najax 可以跨域\npostMessage 可以跨域\n为了防止跨域请求攻击，服务端需要判断 cookie 信息\n采用 token 机制跨域防止跨域攻击</p>\n<blockquote>\n<p>知识点：跨域，JSONP，Fetch，AJAX，postMessage，Cookie，token机制</p>\n</blockquote>\n<h3>下面哪些功能 Service Worker 可以完成：</h3>\n<p>Mock 数据请求\n主动拉取资源文件，并将其缓存\n当请求数据时候服务器 404，自动降级成兜底数据\n将离线时的打点数据存起来，等到联网后再传输\n直接对DOM进行操作\n浏览器关闭后，依然常驻</p>\n<blockquote>\n<p>知识点：Service Worker，模拟请求，缓存机制，请求，DOM</p>\n</blockquote>\n<h3>下面关于性能优化正确的是：</h3>\n<p>PNG 图片永远比 JPG 图片小，所以应当尽量使用 PNG\nCSS 不能放在 <code class=\"language-text\">&lt;body&gt;</code> 底部，因为会导致页面重新渲染\n尽量不要使用 <code class=\"language-text\">with</code>，因为 <code class=\"language-text\">with</code> 内的代码执行效率会变低\nPNG 图片压缩是没用的，因为其算法和 gzip 算法都是无损压缩，所以并不能减少图片大小\n浏览器创建和维持 HTTP链接是需要性能消耗的，所以应当尽量减少同时存在 HTTP 链接的数量\n只能通过服务器检验来确定浏览器是否支持 WebP，JavaScript 没办法检验浏览器是否支持</p>\n<blockquote>\n<p>知识点：图片压缩，WebP，gzip，HTTP，CSS</p>\n</blockquote>\n<h3>以下哪些关于 npm 安装包的说法错误的：</h3>\n<p>使用 <code class=\"language-text\">npm install -g my-pkg</code> 可以将包安装到全局\n<code class=\"language-text\">npm install my-pkg@1.x</code>可以安装1.0以上版本\n<code class=\"language-text\">npm I my-pkg</code>也可以安装\n<code class=\"language-text\">npm install @latest/my-pkg</code>是错误的写法\n<code class=\"language-text\">npm install git://github.com/npm/npm.git</code>是正确的用法\n<code class=\"language-text\">npm install my-pkg –latest</code>可以安装包的最新版本</p>\n<blockquote>\n<p>知识点：Node.js，NPM包管理器</p>\n</blockquote>\n<h3>请根据描述使用 JavaScript 实现函数 _bind 模拟原生 bind 方法，并通过测试用例：</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Function <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//your code here</span>\n\n<span class=\"token comment\">//测试用例</span>\nFunc<span class=\"token punctuation\">.</span><span class=\"token function\">_bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>y<span class=\"token operator\">:</span> ‘foo’<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//undefined “foo”</span>\nFunc<span class=\"token punctuation\">.</span><span class=\"token function\">_bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//undefined undefined</span>\nFunc<span class=\"token punctuation\">.</span><span class=\"token function\">_bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>y<span class=\"token operator\">:</span> ‘bar’<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> ‘foo’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//”foo” “bar”</span></code></pre></div>\n<blockquote>\n<p>知识点：原型链</p>\n<p><a href=\"https://github.com/tocz9es/js-demos/blob/master/2-make-bind/make_bind.js\">题解</a>（通过 Node.js 验证，但不一定是最好写法）</p>\n</blockquote>\n<h3>异步请求逻辑注入</h3>\n<p>工作中我们需要对异步请求的请求信息打印日志，但是又不能耦合在业务代码中打印。请设计一个方法injectBeforeAsyncSend，能够实现如下功能：在发起异步请求之前打印出请求的类型、URL、method、body、timestamp 等信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * injectBeforeAsyncSend.js\n * @param {function(asynConfig)} beforeSend\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">injectBeforeAsyncSend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">beforeSend</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 请在这里补充你的代码实现，在实现代码中请调用 beforeSend 方法进行日志打印</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">injectBeforeAsyncSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">asynConfig</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>asynConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> injectBeforeAsyncSend<span class=\"token punctuation\">;</span></code></pre></div>\n<p>测试用例：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 引入任意想使用的前端异步请求框架</span>\n<span class=\"token keyword\">import</span> $ <span class=\"token keyword\">from</span> <span class=\"token string\">'jquery'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> injectBeforeAsyncSend <span class=\"token keyword\">from</span> <span class=\"token string\">'./injectBeforeAsyncSend'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// jquery 发起 get 请求</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印 {\"asyncType\":\"ajax by XMLHttpRequest\",\"method\":\"GET\",\"url\":\"/user\",\"body\":null,\"timestamp\":1522143037821}</span>\n\n<span class=\"token comment\">// jquery 发起带参数 post 请求</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'jone'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印 {\"asyncType\":\"ajax by XMLHttpRequest\",\"method\":\"POST\",\"url\":\"/user\",\"body\":\"username=jone\",\"timestamp\":1522143037828}</span>\n\n<span class=\"token comment\">// jquery 发起 jsonp 请求</span>\n$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.alibaba.com/user.jsonp'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    dataType<span class=\"token operator\">:</span> <span class=\"token string\">'jsonp'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印 {\"asyncType\":\"jsonp by script\",\"method\":\"get\",\"url\":\"https://www.alibaba.com/user.jsonp?callback=jQuery331047025307012584316_1522143037811&amp;_=1522143037812\",\"timestamp\":1522143037832}</span>\n\n<span class=\"token comment\">// fetch 请求</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印 {\"asyncType\":\"ajax by XMLHttpRequest\",\"method\":\"GET\",\"url\":\"/user\",\"body\":null,\"timestamp\":1522143037838}</span></code></pre></div>\n<blockquote>\n<p>菜鸡，没做出来。</p>\n</blockquote>\n<h3>实现一个网页版的聊天室（类似于钉钉群），请列出关键的技术方案及要点。需求如下：</h3>\n<ul>\n<li>高实时性、高性能</li>\n<li>你发的每条消息可以看到有多少人已读</li>\n<li>当信息中含有“@某人”时，被@的人的界面上会显示“有人@你”的提醒字样</li>\n<li>刷新页面或断网状态下，历史聊天记录不会消失</li>\n</ul>\n<blockquote>\n<p>开放型试题，自认为答得一般，就没脸秀自己写啥了。</p>\n</blockquote>","frontmatter":{"title":"一次经历 一次笔试","date":"September 08, 2018","description":"偶遇大佬，凉了笔试。兴奋，后心累。"}}},"pageContext":{"slug":"/a-experience-and-a-frontend-test/","previous":{"fields":{"slug":"/js-code-executable/"},"frontmatter":{"title":"JavaScript 之代码执行"}},"next":{"fields":{"slug":"/hadoop-scala-spark-config/"},"frontmatter":{"title":"Hadoop, Scala, Spark 简单安装与配置"}}}},"staticQueryHashes":["1353881592","2841359383"]}